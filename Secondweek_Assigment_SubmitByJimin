{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "e9ebe6d0",
   "metadata": {},
   "source": [
    "# 1. 이론 주관식\n",
    "## 1. 과적합이란?\n",
    "    모델이 학습 데이터에만 과도하게 최적화되어서, 실제 예측을 다른 데이터로 수행할 경우에 예측 성능이 과도하게 떨어지는 것.\n",
    "## 2. 과적합을 개선하기 위한 방법 한가지 이상\n",
    "    (1) 교차검증\n",
    "    (2) 데이터 양 늘리기\n",
    "    (3) 모델의 복잡도 줄이기 (정규화)\n",
    "## 3. Imbalanced 분포도를 가진 레이블 데이터 집합에서 사용하는 검증 방법을 찾고 그 방법을 간단하게 설명하시오.\n",
    "**Stratified K 폴드**: \n",
    "    레이블 데이터 분포도에 따라 학습/검증 데이터를 나누기 때문에 split() 메서드에 인자로 피처 데이터 세트뿐만 아니라 레이블 데이터 세트도 반드시 필요하다.\n",
    "    for문에서 피쳐와 데이터 세트를 넣어 n개의 폴드로 나누어진 훈련용, 테스트용 index들을 순서대로 X, y test, train 값에 넣어주고,\n",
    "    각각의 accuracy를 평균낸 것이 결과가 된다."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "a0fe8890",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "#1 교차 검증 정확도 : 0.98, 학습 데이터 크기 : 100, 검증 데이터 크기 : 50\n",
      "#1 검증 세트 인덱스:[  0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  50\n",
      "  51  52  53  54  55  56  57  58  59  60  61  62  63  64  65  66 100 101\n",
      " 102 103 104 105 106 107 108 109 110 111 112 113 114 115]\n",
      "\n",
      "## 교차 검증별 정확도: [0.98]\n",
      "## 평균 검증 정확도: 0.98\n",
      "\n",
      "#2 교차 검증 정확도 : 0.94, 학습 데이터 크기 : 100, 검증 데이터 크기 : 50\n",
      "#2 검증 세트 인덱스:[ 17  18  19  20  21  22  23  24  25  26  27  28  29  30  31  32  33  67\n",
      "  68  69  70  71  72  73  74  75  76  77  78  79  80  81  82 116 117 118\n",
      " 119 120 121 122 123 124 125 126 127 128 129 130 131 132]\n",
      "\n",
      "## 교차 검증별 정확도: [0.98 0.94]\n",
      "## 평균 검증 정확도: 0.96\n",
      "\n",
      "#3 교차 검증 정확도 : 0.98, 학습 데이터 크기 : 100, 검증 데이터 크기 : 50\n",
      "#3 검증 세트 인덱스:[ 34  35  36  37  38  39  40  41  42  43  44  45  46  47  48  49  83  84\n",
      "  85  86  87  88  89  90  91  92  93  94  95  96  97  98  99 133 134 135\n",
      " 136 137 138 139 140 141 142 143 144 145 146 147 148 149]\n",
      "\n",
      "## 교차 검증별 정확도: [0.98 0.94 0.98]\n",
      "## 평균 검증 정확도: 0.9666666666666667\n"
     ]
    }
   ],
   "source": [
    "from sklearn.tree import DecisionTreeClassifier\n",
    "from sklearn.datasets import load_iris\n",
    "from sklearn.metrics import accuracy_score\n",
    "from sklearn.model_selection import KFold\n",
    "import numpy as np\n",
    "dt_clf = DecisionTreeClassifier(random_state=156)\n",
    "\n",
    "iris = load_iris()\n",
    "features = iris.data\n",
    "label = iris.target\n",
    "\n",
    "\n",
    "skfold = StratifiedKFold(n_splits=3)\n",
    "n_iter=0\n",
    "cv_accuracy = []\n",
    "\n",
    "for train_index, test_index in skfold.split(features, label):\n",
    "    X_train, X_test = features[train_index], features[test_index]\n",
    "    y_train, y_test = label[train_index], label[test_index]\n",
    "    \n",
    "    dt_clf.fit(X_train, y_train)\n",
    "    pred = dt_clf.predict(X_test)\n",
    "    \n",
    "    n_iter +=1\n",
    "    accuracy = np.round(accuracy_score(y_test, pred), 4)\n",
    "    train_size = X_train.shape[0]\n",
    "    test_size = X_test.shape[0]\n",
    "    print('\\n#{0} 교차 검증 정확도 : {1}, 학습 데이터 크기 : {2}, 검증 데이터 크기 : {3}'.format(n_iter, accuracy, train_size, test_size))\n",
    "    print('#{0} 검증 세트 인덱스:{1}'.format(n_iter, test_index))\n",
    "    cv_accuracy.append(accuracy)\n",
    "    \n",
    "    print('\\n## 교차 검증별 정확도:', np.round(cv_accuracy, 4))\n",
    "    print('## 평균 검증 정확도:', np.mean(cv_accuracy))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2856031e",
   "metadata": {},
   "source": [
    "## 4. Data Prepocessing (데이터 전처리)에서 인코딩(encoding)을 하는 이유\n",
    "    사이킷런의 머신러닝 알고리즘은 문자열 값을 입력값으로 허용하지 않기때문이다.\n",
    "    따라서 모든 문자열 값은 인코딩돼서 숫자 형으로 변환해주어야 한다.\n",
    "## 5. One-hot encoding의 단점\n",
    "    (1) 저장공간 측면에서 비효율적이다.\n",
    "    (2) 유사도를 표현하지 못한다.\n",
    "## 6. 데이터의 스케일링 변환시 유의해야할 점\n",
    "    Scaler 객체를 이용해 학습 데이터 세트로 fit()과 transform()을 적용하면 테스트 데이터 세트로는 다시fit()을 수행하지 않고, 학습 데이터 세트로 fit()을 수행한 결과를 이용해 transform() 변환을 적용해야한다.\n",
    "    학습데이터 세트로 fit된 Scaler 객체를 사용해야 스케일링 범위가 똑같이 일치되기 때문이다."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0049999a",
   "metadata": {},
   "source": [
    "# 2. Coding part\n",
    "## 1. 데이터 불러오기"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "41d787e8",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "import sklearn"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "e3fe6051",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>age</th>\n",
       "      <th>anaemia</th>\n",
       "      <th>creatinine_phosphokinase</th>\n",
       "      <th>diabetes</th>\n",
       "      <th>ejection_fraction</th>\n",
       "      <th>high_blood_pressure</th>\n",
       "      <th>platelets</th>\n",
       "      <th>serum_creatinine</th>\n",
       "      <th>serum_sodium</th>\n",
       "      <th>sex</th>\n",
       "      <th>smoking</th>\n",
       "      <th>time</th>\n",
       "      <th>DEATH_EVENT</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>75.0</td>\n",
       "      <td>0</td>\n",
       "      <td>582.0</td>\n",
       "      <td>0</td>\n",
       "      <td>20.0</td>\n",
       "      <td>1</td>\n",
       "      <td>265000.00</td>\n",
       "      <td>1.9</td>\n",
       "      <td>130.0</td>\n",
       "      <td>1</td>\n",
       "      <td>N</td>\n",
       "      <td>4.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>55.0</td>\n",
       "      <td>0</td>\n",
       "      <td>7861.0</td>\n",
       "      <td>0</td>\n",
       "      <td>38.0</td>\n",
       "      <td>0</td>\n",
       "      <td>263358.03</td>\n",
       "      <td>1.1</td>\n",
       "      <td>136.0</td>\n",
       "      <td>1</td>\n",
       "      <td>N</td>\n",
       "      <td>6.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>65.0</td>\n",
       "      <td>0</td>\n",
       "      <td>146.0</td>\n",
       "      <td>0</td>\n",
       "      <td>20.0</td>\n",
       "      <td>0</td>\n",
       "      <td>162000.00</td>\n",
       "      <td>1.3</td>\n",
       "      <td>129.0</td>\n",
       "      <td>1</td>\n",
       "      <td>Y</td>\n",
       "      <td>7.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    age  anaemia  creatinine_phosphokinase  diabetes  ejection_fraction  \\\n",
       "0  75.0        0                     582.0         0               20.0   \n",
       "1  55.0        0                    7861.0         0               38.0   \n",
       "2  65.0        0                     146.0         0               20.0   \n",
       "\n",
       "   high_blood_pressure  platelets  serum_creatinine  serum_sodium  sex  \\\n",
       "0                    1  265000.00               1.9         130.0    1   \n",
       "1                    0  263358.03               1.1         136.0    1   \n",
       "2                    0  162000.00               1.3         129.0    1   \n",
       "\n",
       "  smoking  time  DEATH_EVENT  \n",
       "0       N   4.0            1  \n",
       "1       N   6.0            1  \n",
       "2       Y   7.0            1  "
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "heart_df = pd.read_csv('heart_failure_clinical_records_dataset.csv')\n",
    "heart_df.head(3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "14cedaf4",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "65a6a3ab",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      " ### train 데이터 정보 ### \n",
      "\n",
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 299 entries, 0 to 298\n",
      "Data columns (total 13 columns):\n",
      " #   Column                    Non-Null Count  Dtype  \n",
      "---  ------                    --------------  -----  \n",
      " 0   age                       281 non-null    float64\n",
      " 1   anaemia                   299 non-null    int64  \n",
      " 2   creatinine_phosphokinase  298 non-null    float64\n",
      " 3   diabetes                  299 non-null    int64  \n",
      " 4   ejection_fraction         292 non-null    float64\n",
      " 5   high_blood_pressure       299 non-null    int64  \n",
      " 6   platelets                 294 non-null    float64\n",
      " 7   serum_creatinine          297 non-null    float64\n",
      " 8   serum_sodium              296 non-null    float64\n",
      " 9   sex                       299 non-null    int64  \n",
      " 10  smoking                   299 non-null    object \n",
      " 11  time                      295 non-null    float64\n",
      " 12  DEATH_EVENT               299 non-null    int64  \n",
      "dtypes: float64(7), int64(5), object(1)\n",
      "memory usage: 30.5+ KB\n",
      "None\n"
     ]
    }
   ],
   "source": [
    "print('\\n ### train 데이터 정보 ### \\n')\n",
    "print(heart_df.info())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "93a388c5",
   "metadata": {},
   "source": [
    "## 2. 결손 데이터 확인"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "64f8b033",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "데이터 세트 NULL 값 개수\n",
      " age                         18\n",
      "anaemia                      0\n",
      "creatinine_phosphokinase     1\n",
      "diabetes                     0\n",
      "ejection_fraction            7\n",
      "high_blood_pressure          0\n",
      "platelets                    5\n",
      "serum_creatinine             2\n",
      "serum_sodium                 3\n",
      "sex                          0\n",
      "smoking                      0\n",
      "time                         4\n",
      "DEATH_EVENT                  0\n",
      "dtype: int64\n"
     ]
    }
   ],
   "source": [
    "print('데이터 세트 NULL 값 개수\\n', heart_df.isna().sum())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "5502cae9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'numpy.ndarray'>\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "array(['age', 'creatinine_phosphokinase', 'ejection_fraction',\n",
       "       'platelets', 'serum_creatinine', 'serum_sodium', 'time'],\n",
       "      dtype='<U24')"
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "type(heart_df.isna().sum())\n",
    "null_names = np.array([ i for i in heart_df.isna().sum().index if heart_df.isna().sum()[i] !=0 ])\n",
    "\n",
    "print(type(null_names))\n",
    "null_names"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "id": "f76e4721",
   "metadata": {},
   "outputs": [],
   "source": [
    "for null_name in null_names:\n",
    "    heart_df[null_name].fillna(heart_df[null_name].mean(), inplace=True)\n",
    "heart_df['age'] = round(heart_df['age'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "id": "44fc6cc4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "데이터 세트 Null 값 갯수 \n",
      " age                         0\n",
      "anaemia                     0\n",
      "creatinine_phosphokinase    0\n",
      "diabetes                    0\n",
      "ejection_fraction           0\n",
      "high_blood_pressure         0\n",
      "platelets                   0\n",
      "serum_creatinine            0\n",
      "serum_sodium                0\n",
      "sex                         0\n",
      "smoking                     0\n",
      "time                        0\n",
      "DEATH_EVENT                 0\n",
      "dtype: int64\n"
     ]
    }
   ],
   "source": [
    "print('데이터 세트 Null 값 갯수 \\n', heart_df.isnull().sum())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e3cb3081",
   "metadata": {},
   "source": [
    "## 3. 나이, 성별, 흡연 여부로 다양하게 분포 파악하기"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "id": "6e0ba002",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " Sex 값 분포 :\n",
      "1    194\n",
      "0    105\n",
      "Name: sex, dtype: int64\n",
      "\n",
      "\n",
      " age 값 분포: \n",
      "60.0    30\n",
      "50.0    25\n",
      "70.0    25\n",
      "65.0    24\n",
      "61.0    23\n",
      "55.0    17\n",
      "45.0    17\n",
      "58.0    10\n",
      "75.0    10\n",
      "53.0     9\n",
      "40.0     7\n",
      "72.0     7\n",
      "80.0     7\n",
      "42.0     7\n",
      "85.0     6\n",
      "63.0     6\n",
      "62.0     5\n",
      "52.0     5\n",
      "68.0     4\n",
      "49.0     4\n",
      "51.0     4\n",
      "59.0     4\n",
      "73.0     4\n",
      "82.0     3\n",
      "69.0     3\n",
      "64.0     3\n",
      "66.0     2\n",
      "46.0     2\n",
      "57.0     2\n",
      "44.0     2\n",
      "54.0     2\n",
      "67.0     2\n",
      "95.0     2\n",
      "77.0     2\n",
      "48.0     2\n",
      "90.0     2\n",
      "56.0     1\n",
      "87.0     1\n",
      "81.0     1\n",
      "78.0     1\n",
      "86.0     1\n",
      "41.0     1\n",
      "43.0     1\n",
      "94.0     1\n",
      "79.0     1\n",
      "47.0     1\n",
      "Name: age, dtype: int64\n",
      "\n",
      "\n",
      " smoking 값 분포: \n",
      "N    203\n",
      "Y     96\n",
      "Name: smoking, dtype: int64\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print(' Sex 값 분포 :\\n{0}\\n'.format(heart_df['sex'].value_counts()) )\n",
    "print('\\n age 값 분포: \\n{0}\\n'.format(heart_df['age'].value_counts()))\n",
    "print('\\n smoking 값 분포: \\n{0}\\n'.format(heart_df['smoking'].value_counts()))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "id": "e97e78ed",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "sex  DEATH_EVENT\n",
       "0    0               71\n",
       "     1               34\n",
       "1    0              132\n",
       "     1               62\n",
       "Name: DEATH_EVENT, dtype: int64"
      ]
     },
     "execution_count": 80,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "heart_df.groupby(['sex', 'DEATH_EVENT'])['DEATH_EVENT'].count()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "id": "4d7ca0cc",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='sex', ylabel='DEATH_EVENT'>"
      ]
     },
     "execution_count": 81,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.barplot(x='sex', y = 'DEATH_EVENT', data=heart_df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "id": "d86cb0e6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='smoking', ylabel='DEATH_EVENT'>"
      ]
     },
     "execution_count": 83,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAYMAAAEGCAYAAACHGfl5AAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjMuNCwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8QVMy6AAAACXBIWXMAAAsTAAALEwEAmpwYAAAUv0lEQVR4nO3dfZBddZ3n8ffHJGxcza48KQ8Nk7CiAiIzEnxYXWR0Yggq1DrOQBzXwogUUzCis/LgOouLOu4M+LQuCBstiqHWApZVhogx7P4xglOGgWR2MAEWzMAKnRBNghMRByHJd/+4t5mbppOcJPf07U6/X1Vdfc75/c6534aufPqc3zm/k6pCkjS1vWjQBUiSBs8wkCQZBpIkw0CShGEgSQKmD7qAPXHQQQfV7NmzB12GJE0qK1eu3FhVB4/VNinDYPbs2axYsWLQZUjSpJLkJztq8zKRJMkwkCQZBpIkJumYgSQNynPPPcfw8DDPPPPMoEvZoZkzZzI0NMSMGTMa72MYSNJuGB4eZtasWcyePZskgy7nBaqKTZs2MTw8zJw5cxrv52UiSdoNzzzzDAceeOCEDAKAJBx44IG7febSahgkuS7Jz5Ks3kF7knw1yZokP0ry+jbrkaR+mKhBMGJP6mv7zOB64NSdtC8Aju5+nQtc03I9kqQxtDpmUFV3JZm9ky5nADdU56UKdyd5WZJDq+qJNuuStHMXX3wx69ev55BDDuGKK64YdDkaB4MeQD4ceLxnfbi77QVhkORcOmcPHHnkkeNSnDRVrV+/nrVr1w66DI2jQQ8gj3Vha8xXr1XV4qqaW1VzDz54zKk1JGlCevrpp3nXu97FCSecwGtf+1puvvlmVq5cydve9jZOPPFE5s+fzxNPPMHmzZt59atfzUMPPQTAwoUL+frXvz4uNQ76zGAYOKJnfQhYN6BaJKkVy5Yt47DDDuO73/0uAJs3b2bBggXcdtttHHzwwdx888186lOf4rrrruOqq67i7LPP5sILL+TnP/85H/nIR8alxkGHwRLggiQ3AW8ENjteIGlfc/zxx/OJT3yCSy65hHe/+93sv//+rF69mnnz5gGwdetWDj30UADmzZvHLbfcwvnnn8999903bjW2GgZJbgROAQ5KMgx8GpgBUFXXAkuB04A1wK+AD7VZjyQNwqte9SpWrlzJ0qVL+eQnP8m8efM47rjjWL58+Qv6btu2jQcffJAXv/jFPPnkkwwNDY1LjW3fTbRwF+0FnN9mDZI0aOvWreOAAw7gAx/4AC996UtZvHgxGzZsYPny5bz5zW/mueee4+GHH+a4447jy1/+Mscccwyf//znWbRoEcuXL9+taSX21KAvE0nSPm/VqlVcdNFFvOhFL2LGjBlcc801TJ8+nY9+9KNs3ryZLVu28LGPfYwZM2bwjW98g3vuuYdZs2Zx8skn87nPfY7LL7+89RoNA0lq2fz585k/f/4Ltt91110v2Pbggw8+v/ylL32p1bp6DfrWUknSBGAYSJIMA0mSYSBJwjCQJGEYSJLw1lJJ2isnXnRDX4+38soP7rLPsmXLuPDCC9m6dSvnnHMOl1566V5/rmcGkjSJbN26lfPPP5/vfe97PPDAA9x444088MADe31cw0CSJpF77rmHV77ylRx11FHst99+nHXWWdx22217fVzDQJImkbVr13LEEf808//Q0FBfXkRkGEjSJNKZ33N7yVjvCds9hoEkTSJDQ0M8/vg/vS14eHiYww47bK+PaxhI0iRy0kkn8eMf/5hHH32UZ599lptuuonTTz99r4/rraWStBea3AraT9OnT+eqq65i/vz5bN26lUWLFnHcccft/XH7UJskaRyddtppnHbaaX09ppeJJEmGgSTJMJAkYRhIkjAMJEkYBpIkvLVUkvbKY585vq/HO/KyVbvss2jRIm6//XZe/vKXs3r16r58rmcGkjTJnH322SxbtqyvxzQMJGmSOfnkkznggAP6ekzDQJJkGEiSDANJEoaBJAlvLZWkvdLkVtB+W7hwId///vfZuHEjQ0NDXH755Xz4wx/eq2MaBpI0ydx44419P2brl4mSnJrkoSRrklw6Rvu/TPKdJPcluT/Jh9quSZK0vVbDIMk04GpgAXAssDDJsaO6nQ88UFUnAKcAX0yyX5t1SZK21/aZwRuANVX1SFU9C9wEnDGqTwGzkgR4KfAksKXluiRpj1XVoEvYqT2pr+0wOBx4vGd9uLut11XAMcA6YBVwYVVtG32gJOcmWZFkxYYNG9qqV5J2aubMmWzatGnCBkJVsWnTJmbOnLlb+7U9gJwxto3+Lzgf+Dvg7cC/Av53kh9U1S+226lqMbAYYO7cuRPz/4Kkfd7Q0BDDw8NM5D9KZ86cydDQ0G7t03YYDANH9KwP0TkD6PUh4M+qE7NrkjwKvAa4p+XaJGm3zZgxgzlz5gy6jL5r+zLRvcDRSeZ0B4XPApaM6vMY8A6AJK8AXg080nJdkqQerZ4ZVNWWJBcAdwDTgOuq6v4k53XbrwU+C1yfZBWdy0qXVNXGNuuSJG2v9YfOqmopsHTUtmt7ltcB72y7DknSjjk3kSTJMJAkGQaSJAwDSRLOWipNOCdedMOgS2DWxqeYBjy28amB1rPyyg8O7LOnGs8MJEmGgSTJMJAkYRhIkjAMJEkYBpIkDANJEoaBJAnDQJKEYSBJwjCQJGEYSJIwDCRJNAiD7juMJUn7sCZnBotar0KSNFBeJpIkNXq5zeuS/GKM7QGqqv5Fn2uSJI2zJmGwqqp+q/VKJEkD42UiSVKjMLil9SokSQPV5DLRjCSX7aCtquqz/SxIkjT+moTBL8fY9s+Bc4ADAcNAkia5XYZBVX1xZDnJLOBCOs8e3AR8cUf7SZImjyZnBiQ5APhj4A+AvwBeX1U/b7MwSdL42WUYJLkSeC+wGDi+qsa6bCRJmsSa3E3074HDgD8B1iX5RffrqR08jCZJmmSajBn4LIIk7eOazFr69p7lOaPa3ttg/1OTPJRkTZJLd9DnlCR/l+T+JHc2KVyS1D9N/ur/Qs/yt0a1/cnOdkwyDbgaWAAcCyxMcuyoPi8DvgacXlXHAb/XoCZJUh81CYPsYHms9dHeAKypqkeq6lk6t6OeMarP+4FvV9VjAFX1swY1SZL6qEkY1A6Wx1of7XDg8Z714e62Xq8C9k/y/SQrk3ywQU2SpD5q8pzBUUmW0DkLGFmmuz5nx7s932e00QEyHTgReAfwYmB5krur6uHtDpScC5wLcOSRRzYoW5LUVJMw6L2s84VRbaPXRxsGjuhZHwLWjdFnY1U9DTyd5C7gBGC7MKiqxXSedWDu3Lm7OiORJO2GJmFwEnBzVT2+y54vdC9wdPcupLXAWXTGCHrdBlyVZDqwH/BG4Mt78FmSpD3UJAwOB36Y5FHgRuCWqtrY5OBVtSXJBcAdwDTguqq6P8l53fZrq+rBJMuAHwHbgG9U1eo9+WEkSXumyUNnH0/yx8DJdP6y/49J7qMTDLdW1VO72H8psHTUtmtHrV8JXLmbtUuS+qTR08XVcWdV/SGdMYCvAB8HftpibZKkcdJo1tIRSY6nc3ZwJrAJ+A9tFCVJGl9NZi09mk4ALAS20nlw7J1V9UjLtUmSxkmTM4M76IwPnFlVq1quR5I0AE3C4F1V9SBAkn9WVb8eaUjypqq6u7XqJEnjoskA8jd7lpePavtaH2uRJA1I2xPVSZImgbYnqpMkTQJNxgyGknyVzlnAyDLd9dEzkEqSJqEmYXBRz/KKUW2j1yVJk1CT6Sj+osmBkvzXqvqjvS9JkjTe+vmy+7f08ViSpHHUzzCQJE1ShoEkqa9h4DMHkjRJ9TMM/ksfjyVJGkdNZi39Djt5uKyqTu9+v75/ZUmSxlOT5wxGXnof4OvAOe2VI0kahCbPGdw5spzkl73rkqR9w+6OGTgXkSTtg5qMGRzQszotyf703DlUVU+2UZgkafw0GTNYSeeMYCQA/ranrYCj+l2UJGl8NQmDU6rqJ61XIkkamCZjBre2XoUkaaB2901nkqR9UJPLRIf3vNDmBarqo32sR5I0AE3C4B/pDCJLkvZRTcJgU9MX3EiSJqcmYfDsWBuTvAV4f1Wd39+SNNVcfPHFrF+/nkMOOYQrrrhi0OVIU1KT6SjeNLKc5DeB9wO/DzwKfLu1yjRlrF+/nrVr1w66DGlKa/IE8quAs4CFwCbgZiBV9dst1yZJGidNLhP9X+AHwHuqag1Ako+3WpUkaVw1ec7gd4H1wF8l+XqSd+CzB5K0T9llGFTVrVV1JvAa4PvAx4FXJLkmyTt3tX+SU5M8lGRNkkt30u+kJFuTvG836pck9UGTy0QAVNXTwDeBb3ZnMv094FLgf+1onyTTgKuBecAwcG+SJVX1wBj9/hy4Y7d/gknKO2gkTSS7PDNI8vae5TnQmba6qv4bnX/od+YNwJqqeqSqngVuAs4Yo98fAd8Cfta08Mlu5A6a9evXD7oUSWo0ZvCFnuVvjWr71C72PRx4vGd9uLvteUkOB/4tcO3ODpTk3CQrkqzYsGHDLj5WkrQ7mlwmyg6Wx1rf2b4jRr8t7SvAJVW1Ndnx4apqMbAYYO7cub5xTdK4mCqXdJuEQe1geaz10YaBI3rWh4B1o/rMBW7qBsFBwGlJtlTVXzaoTZJaNVUeimwSBkclWULnr/yRZbrrc3ax773A0d2xhrV0Hl57f2+Hqnr+GEmuB243CCRpfDUJg94B3y+Mahu9vp2q2pLkAjp3CU0Drquq+5Oc123f6TiBJGl8NJmb6M6R5SQHd7c1HsGtqqXA0lHbxgyBqjq76XElSf3T5NbSJPl0ko10pqZ4OMmGJJe1X54kaTw0ubX0Y8BbgZOq6sCq2h94I/AW5yiSpH1DkzD4ILCwqh4d2VBVjwAf6LZJkia5JmEwo6o2jt7YHTeY0f+SJEnjrUkYjPmmswZtkqRJosmtpSck+cUY2wPM7HM9kqQBaHJr6bTxKESD89hnjh/o52958gBgOlue/MnAaznyslUD/XxpUJpcJpIk7eMMA0mSYSBJMgwkSRgGkiQMA0kSzZ4z2CedeNENA/38WRufYhrw2ManBl7LrbMG+vGSJgDPDCRJhoEkaQpfJpI08Q36iXSYOE/It/10vGcGkiTDQJJkGEiSMAwkSRgGkiQMA0kShoEkCcNAkoRhIEnCJ5AljWHbfi/Z7rv2fYaBBu6gmduALd3vmgiePvqdgy5B48ww0MB94nX/MOgSpCnPMQNJkmEgSTIMJEmMQxgkOTXJQ0nWJLl0jPY/SPKj7tcPk5zQdk2SpO21OoCcZBpwNTAPGAbuTbKkqh7o6fYo8Laq+nmSBcBi4I1t1jUReOuepImk7buJ3gCsqapHAJLcBJwBPB8GVfXDnv53A0Mt1zQheOuepImk7ctEhwOP96wPd7ftyIeB743VkOTcJCuSrNiwYUMfS5SkHTto5jZe8eJ9/zmYts8MMsa2GrNj8tt0wuCtY7VX1WI6l5CYO3fumMeQpH6bKs/BtB0Gw8ARPetDwLrRnZK8DvgGsKCqNrVckyRplLYvE90LHJ1kTpL9gLOAJb0dkhwJfBv4d1X1cMv1SJLG0OqZQVVtSXIBcAcwDbiuqu5Pcl63/VrgMuBA4GtJALZU1dw265Ikba/1uYmqaimwdNS2a3uWzwHOabsOSdKO+QSyJMkwkCQZBpIkDANJEoaBJAnDQJKEYSBJwjCQJGEYSJIwDCRJGAaSJAwDSRKGgSQJw0CShGEgScIwkCRhGEiSMAwkSRgGkiQMA0kShoEkCcNAkoRhIEnCMJAkYRhIkjAMJEkYBpIkDANJEoaBJAnDQJKEYSBJwjCQJGEYSJIYhzBIcmqSh5KsSXLpGO1J8tVu+4+SvL7tmiRJ22s1DJJMA64GFgDHAguTHDuq2wLg6O7XucA1bdYkSXqhts8M3gCsqapHqupZ4CbgjFF9zgBuqI67gZclObTluiRJPaa3fPzDgcd71oeBNzboczjwRG+nJOfSOXMA+GWSh/pb6tT1G3AQsHHQdUwIn86gK1APfzd79Od38zd21NB2GIxVfe1BH6pqMbC4H0Vpe0lWVNXcQdchjebv5vhp+zLRMHBEz/oQsG4P+kiSWtR2GNwLHJ1kTpL9gLOAJaP6LAE+2L2r6E3A5qp6YvSBJEntafUyUVVtSXIBcAcwDbiuqu5Pcl63/VpgKXAasAb4FfChNmvSmLz8ponK381xkqoXXJ6XJE0xPoEsSTIMJEmGwZSVpJJ8sWf9E0n+0wBLkoDnp6j56yQLerb9fpJlg6xrX2cYTF2/Bt6b5KBBFyL1qs5A5nnAl5LMTPIS4E+B8wdb2b7NMJi6ttC5U+Pjgy5EGq2qVgPfAS4BPk1nypq/H2xV+7a2n0DWxHY18KMkVwy6EGkMlwN/CzwL+BRyywyDKayqfpHkBuCjwD8Ouh6pV1U9neRm4JdV9etB17Ov8zKRvgJ8GHjJgOuQxrKt+6WWGQZTXFU9CfwPOoEgaYoyDATwRTpTBUuaopyOQpLkmYEkyTCQJGEYSJIwDCRJGAaSJAwDqa+SnJLk9jG2n57k0kHUJDXhdBTSOKiqJbzw/d/ShOGZgaa0JC9J8t0k9yVZneTMJP8vyeeTLE+yIsnrk9yR5O9H3t/dnXP/yu4+q5KcOcaxT0ryf5IcleTsJFd1t1+f5KtJfpjkkSTv625/UZKvJbk/ye1Jlo60SW0zDDTVnQqsq6oTquq1wMgLVB6vqjcDPwCuB94HvAn4TLf9vcBvAicAvwNcmeTQkYMm+dfAtcAZVfXIGJ97KPBW4N3An/UcczZwPHAO8Oa+/IRSA4aBprpVwO8k+fMk/6aqNne3L+lp/5uqeqqqNgDPJHkZnX/Ib6yqrVX1U+BO4KTuPsfQeVfEe6rqsR187l9W1baqegB4RXfbW4FbutvXA3/Vzx9U2hnDQFNaVT0MnEjnH/3/nOSybtPIlMnbepZH1qcD2clhnwCeAX5rJ316j5lR36VxZxhoSktyGPCrqvrvwBeA1zfc9S7gzCTTkhwMnAzc0237B+BdwOeTnLIb5fw18LvdsYNXALuzr7RXvJtIU93xdK73bwOeA/4Q+J8N9ruVzjX9+4ACLq6q9UleA1BVP03yHuB7SRY1rOVbwDuA1cDDwN8Am3e6h9QnzloqTSBJXlpVv0xyIJ0zjbd0xw+kVnlmIE0st3cHqPcDPmsQaLx4ZiBJcgBZkmQYSJIwDCRJGAaSJAwDSRLw/wE20Y16FFgmuwAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.barplot(x='smoking', y = 'DEATH_EVENT', hue = 'sex', data=heart_df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "id": "7a193c23",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# 입력 age에 따라 구분값을 반환하는 함수 설정. DataFrame의 apply lambda식에 사용. \n",
    "def get_category(age):\n",
    "    cat = ''\n",
    "    if age <= 55: cat = 'below55'\n",
    "    elif age <= 65: cat = '56To65'\n",
    "    elif age <= 75: cat = '66To75'\n",
    "    elif age <= 85: cat = '76To85'\n",
    "    else : cat = 'Above86'\n",
    "    \n",
    "    return cat\n",
    "\n",
    "# 막대그래프의 크기 figure를 더 크게 설정 \n",
    "plt.figure(figsize=(10,6))\n",
    "\n",
    "#X축의 값을 순차적으로 표시하기 위한 설정 \n",
    "group_names = ['below55', '56To65', '66To75', '76To85', 'Above86']\n",
    "\n",
    "# lambda 식에 위에서 생성한 get_category( ) 함수를 반환값으로 지정. \n",
    "# get_category(X)는 입력값으로 'Age' 컬럼값을 받아서 해당하는 cat 반환\n",
    "heart_df['Age_cat'] = heart_df['age'].apply(lambda x : get_category(x))\n",
    "sns.barplot(x='Age_cat', y='DEATH_EVENT', hue='sex', data=heart_df, order=group_names)\n",
    "heart_df.drop('Age_cat', axis=1, inplace=True)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "id": "0a6afeac",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(10,6))\n",
    "heart_df['Age_cat'] = heart_df['age'].apply(lambda x : get_category(x))\n",
    "sns.barplot(x='Age_cat', y='DEATH_EVENT', hue='smoking', data=heart_df, order=group_names)\n",
    "heart_df.drop('Age_cat', axis=1, inplace=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ba3dcba1",
   "metadata": {},
   "source": [
    "## 4. 데이터 전처리"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "id": "41ac900f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>age</th>\n",
       "      <th>anaemia</th>\n",
       "      <th>creatinine_phosphokinase</th>\n",
       "      <th>diabetes</th>\n",
       "      <th>ejection_fraction</th>\n",
       "      <th>high_blood_pressure</th>\n",
       "      <th>platelets</th>\n",
       "      <th>serum_creatinine</th>\n",
       "      <th>serum_sodium</th>\n",
       "      <th>sex</th>\n",
       "      <th>smoking</th>\n",
       "      <th>time</th>\n",
       "      <th>DEATH_EVENT</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>75.0</td>\n",
       "      <td>0</td>\n",
       "      <td>582.0</td>\n",
       "      <td>0</td>\n",
       "      <td>20.0</td>\n",
       "      <td>1</td>\n",
       "      <td>265000.00</td>\n",
       "      <td>1.9</td>\n",
       "      <td>130.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>55.0</td>\n",
       "      <td>0</td>\n",
       "      <td>7861.0</td>\n",
       "      <td>0</td>\n",
       "      <td>38.0</td>\n",
       "      <td>0</td>\n",
       "      <td>263358.03</td>\n",
       "      <td>1.1</td>\n",
       "      <td>136.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>65.0</td>\n",
       "      <td>0</td>\n",
       "      <td>146.0</td>\n",
       "      <td>0</td>\n",
       "      <td>20.0</td>\n",
       "      <td>0</td>\n",
       "      <td>162000.00</td>\n",
       "      <td>1.3</td>\n",
       "      <td>129.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>7.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>50.0</td>\n",
       "      <td>1</td>\n",
       "      <td>111.0</td>\n",
       "      <td>0</td>\n",
       "      <td>20.0</td>\n",
       "      <td>0</td>\n",
       "      <td>210000.00</td>\n",
       "      <td>1.9</td>\n",
       "      <td>137.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>65.0</td>\n",
       "      <td>1</td>\n",
       "      <td>160.0</td>\n",
       "      <td>1</td>\n",
       "      <td>20.0</td>\n",
       "      <td>0</td>\n",
       "      <td>327000.00</td>\n",
       "      <td>2.7</td>\n",
       "      <td>116.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>8.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    age  anaemia  creatinine_phosphokinase  diabetes  ejection_fraction  \\\n",
       "0  75.0        0                     582.0         0               20.0   \n",
       "1  55.0        0                    7861.0         0               38.0   \n",
       "2  65.0        0                     146.0         0               20.0   \n",
       "3  50.0        1                     111.0         0               20.0   \n",
       "4  65.0        1                     160.0         1               20.0   \n",
       "\n",
       "   high_blood_pressure  platelets  serum_creatinine  serum_sodium  sex  \\\n",
       "0                    1  265000.00               1.9         130.0    1   \n",
       "1                    0  263358.03               1.1         136.0    1   \n",
       "2                    0  162000.00               1.3         129.0    1   \n",
       "3                    0  210000.00               1.9         137.0    1   \n",
       "4                    0  327000.00               2.7         116.0    0   \n",
       "\n",
       "   smoking  time  DEATH_EVENT  \n",
       "0        0   4.0            1  \n",
       "1        0   6.0            1  \n",
       "2        1   7.0            1  \n",
       "3        0   7.0            1  \n",
       "4        0   8.0            1  "
      ]
     },
     "execution_count": 87,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn import preprocessing\n",
    "\n",
    "def encode_features(dataDF):\n",
    "    features = ['smoking']\n",
    "    for feature in features:\n",
    "        le = preprocessing.LabelEncoder()\n",
    "        le = le.fit(dataDF[feature])\n",
    "        dataDF[feature] = le.transform(dataDF[feature])\n",
    "        \n",
    "    return dataDF\n",
    "\n",
    "heart_df = encode_features(heart_df)\n",
    "heart_df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "996bb047",
   "metadata": {},
   "source": [
    "## 5. Null 처리 & 불필요 feature 제거 & 레이블 인코딩 & 새로 호출"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "id": "bd0d4b90",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.preprocessing import LabelEncoder\n",
    "\n",
    "# Null 처리 함수\n",
    "def fillna(df):\n",
    "    null_names = np.array([ i for i in heart_df.isna().sum().index if heart_df.isna().sum()[i] !=0 ])\n",
    "    for null_name in null_names:\n",
    "        df[null_name].fillna(heart_df[null_name].mean(), inplace=True)\n",
    "    df['age'] = round(df['age'])\n",
    "    return df\n",
    "\n",
    "# 머신러닝 알고리즘에 불필요한 속성 제거\n",
    "def drop_features(df):\n",
    "    df.drop(['time'],axis=1,inplace=True)\n",
    "    return df\n",
    "\n",
    "# 레이블 인코딩 수행. \n",
    "def format_features(df):\n",
    "    features = ['smoking']\n",
    "    for feature in features:\n",
    "        le = LabelEncoder()\n",
    "        le = le.fit(df[feature])\n",
    "        df[feature] = le.transform(df[feature])\n",
    "    return df\n",
    "\n",
    "# 앞에서 설정한 Data Preprocessing 함수 호출\n",
    "def transform_features(df): \n",
    "    df = fillna(df)\n",
    "    df = drop_features(df)\n",
    "    df = format_features(df)\n",
    "    return df"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cf0c2604",
   "metadata": {},
   "source": [
    "## 6. 원본 데이터를 재로딩 하고, feature데이터 셋과 Label 데이터 셋 추출."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 99,
   "id": "5e37b2c9",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 원본 데이터를 재로딩 하고, feature데이터 셋과 Label 데이터 셋 추출. \n",
    "heart_df = pd.read_csv('heart_failure_clinical_records_dataset.csv')\n",
    "y_heart_df = heart_df['DEATH_EVENT']\n",
    "X_heart_df= heart_df.drop('DEATH_EVENT',axis=1)\n",
    "X_heart_df = transform_features(X_heart_df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 101,
   "id": "d7553281",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "X_train, X_test, y_train, y_test=train_test_split(X_heart_df, y_heart_df, \n",
    "                                                  test_size=0.3, random_state=2021)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "523f0474",
   "metadata": {},
   "source": [
    "## 7. 결정트리, Random Forest, 로지스틱 회귀로 데이터를 학습시키고 각 classifier에서 정확도 도출"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 102,
   "id": "aa361d12",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "DecisionTreeClassifier 정확도: 0.7000\n",
      "RandomForestClassifier 정확도: 0.7667\n",
      "LogisticRegression 정확도: 0.7667\n"
     ]
    }
   ],
   "source": [
    "from sklearn.tree import DecisionTreeClassifier\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.metrics import accuracy_score\n",
    "\n",
    "# 결정트리, Random Forest, 로지스틱 회귀를 위한 사이킷런 Classifier 클래스 생성\n",
    "dt_clf = DecisionTreeClassifier(random_state=2021)\n",
    "rf_clf = RandomForestClassifier(random_state=2021)\n",
    "lr_clf = LogisticRegression()\n",
    "\n",
    "# DecisionTreeClassifier 학습/예측/평가\n",
    "df_clf.fit(X_train, y_train)\n",
    "df_pred = df_clf.predict(X_test)\n",
    "print('DecisionTreeClassifier 정확도: {0:.4f}'.format(accuracy_score(y_test, df_pred)))\n",
    "\n",
    "# RandomForestClassifier 학습/예측/평가\n",
    "rf_clf.fit(X_train, y_train)\n",
    "rf_pred = rf_clf.predict(X_test)\n",
    "print('RandomForestClassifier 정확도: {0:.4f}'.format(accuracy_score(y_test, rf_pred)))\n",
    "\n",
    "# LogisticRegression 학습/예측/평가\n",
    "lr_clf.fit(X_train, y_train)\n",
    "lr_pred = lr_clf.predict(X_test)\n",
    "print('LogisticRegression 정확도: {0:.4f}'.format(accuracy_score(y_test, lr_pred)))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2eaa4487",
   "metadata": {},
   "source": [
    "## 8. KFold 이용 (fold = 5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 104,
   "id": "639603f7",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "교차 검증 0 정확도: 0.3000\n",
      "교차 검증 1 정확도: 0.6333\n",
      "교차 검증 2 정확도: 0.7333\n",
      "교차 검증 3 정확도: 0.6833\n",
      "교차 검증 4 정확도: 0.7288\n",
      "평균 정확도: 0.6158\n"
     ]
    }
   ],
   "source": [
    "from sklearn.model_selection import KFold\n",
    "\n",
    "def exec_kfold(clf, folds=5):\n",
    "    # 폴드 세트를 5개인 KFold객체를 생성, 폴드 수만큼 예측결과 저장을 위한  리스트 객체 생성.\n",
    "    kfold = KFold(n_splits=folds)\n",
    "    scores = []\n",
    "    \n",
    "    # KFold 교차 검증 수행. \n",
    "    for iter_count , (train_index, test_index) in enumerate(kfold.split(X_heart_df)):\n",
    "        # X_titanic_df 데이터에서 교차 검증별로 학습과 검증 데이터를 가리키는 index 생성\n",
    "        X_train, X_test = X_heart_df.values[train_index], X_heart_df.values[test_index]\n",
    "        y_train, y_test = y_heart_df.values[train_index], y_heart_df.values[test_index]\n",
    "        \n",
    "        # Classifier 학습, 예측, 정확도 계산 \n",
    "        clf.fit(X_train, y_train)\n",
    "        pred = clf.predict(X_test)\n",
    "        ac = accuracy_score(y_test, pred)\n",
    "        scores.append(ac)\n",
    "        print('교차 검증 {0} 정확도: {1:.4f}'.format(iter_count, ac))\n",
    "    \n",
    "    # 5개 fold에서의 평균 정확도 계산. \n",
    "    mean_score = np.mean(scores)\n",
    "    print(\"평균 정확도: {0:.4f}\".format(mean_score)) \n",
    "# exec_kfold 호출\n",
    "exec_kfold(dt_clf , folds=5)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "55ef2bf1",
   "metadata": {},
   "source": [
    "## 9. cross_val_score 사용"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 105,
   "id": "b92bd280",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "교차 검증 0 정확도: 0.6833\n",
      "교차 검증 1 정확도: 0.7333\n",
      "교차 검증 2 정확도: 0.7000\n",
      "교차 검증 3 정확도: 0.6833\n",
      "교차 검증 4 정확도: 0.6441\n",
      "평균 정확도: 0.6888\n"
     ]
    }
   ],
   "source": [
    "\n",
    "from sklearn.model_selection import cross_val_score\n",
    "\n",
    "scores = cross_val_score(dt_clf, X_heart_df , y_heart_df , cv=5)\n",
    "for iter_count, ac in enumerate(scores):\n",
    "    print('교차 검증 {0} 정확도: {1:.4f}'.format(iter_count, ac))\n",
    "\n",
    "print(\"평균 정확도: {0:.4f}\".format(np.mean(scores)))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a0b7a066",
   "metadata": {},
   "source": [
    "## 10. GridSearchCV를 이용해서 최적의 hyper-parameter를 구하고 최고의 정확도 구해보기"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 110,
   "id": "9f3729fb",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "GridSearchCV 최적 하이퍼 파라미터 : {'max_depth': 2, 'min_samples_leaf': 8, 'min_samples_split': 2}\n",
      "GridSearchCV 최고 정확도 :0.7179\n",
      "테스트 세트에서의 DecisionTreeClassifier 정확도 : 0.7556\n"
     ]
    }
   ],
   "source": [
    "from sklearn.model_selection import GridSearchCV\n",
    "\n",
    "parameters = {'max_depth':[2,3,5,10],\n",
    "             'min_samples_split':[2,3,5], 'min_samples_leaf':[1,5,8]}\n",
    "\n",
    "grid_dclf = GridSearchCV(dt_clf, param_grid=parameters, scoring='accuracy', cv=5)\n",
    "grid_dclf.fit(X_train, y_train)\n",
    "\n",
    "print('GridSearchCV 최적 하이퍼 파라미터 :', grid_dclf.best_params_)\n",
    "print('GridSearchCV 최고 정확도 :{0:.4f}'.format(grid_dclf.best_score_) )\n",
    "best_dclf = grid_dclf.best_estimator_\n",
    "\n",
    "dpred = best_dclf.predict(X_test)\n",
    "ac = accuracy_score(y_test, dpred)\n",
    "print('테스트 세트에서의 DecisionTreeClassifier 정확도 : {0:.4f}'.format(ac))"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
